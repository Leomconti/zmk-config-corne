#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>


// Hyper key
#define HYPER    LS(LC(LA(LGUI)))

// Layer definitions
#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        // This will be used to make shift either on tap or hold -> &lht LSHFT LSHFT
        lht: leftshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&skq>;
        };

        // Use this so the shift doesn't capitalize more than 1 key -> &skq LSHFT
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
      };

        // It's so that my hyper goes to
        // Layer + Modifier  -> ( kind of &mo 1 + HYPER ) held
        lm_one_hyper: lm_one_hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mo 1>
                , <&macro_press &kp HYPER>
                , <&macro_pause_for_release>
                , <&macro_release &kp HYPER>
                , <&macro_release &mo 1>
                ;
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };

    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <13 29>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <15 21>;
        };

        perc {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 16>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <3 15>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 14>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <28 27>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <26 27>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <32 20>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <31 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 18>;
        };

        leftbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        rightbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 32>;
        };

        para-less {
            bindings = <&paraless>;
            key-positions = <20 19>;
        };

        para-great {
            bindings = <&paragreat>;
            key-positions = <20 21>;
        };
    };

    // TODO: my lower layer is absolutely terrible, have to update it, it has shit utility
    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |
            //                             | LALT | MO2  | RET   | SPC   | LT1/ESC | LGUI |

            bindings = <
&kp TAB       &kp Q    &kp W    &kp E    &kp R    &kp T        &kp Y    &kp U    &kp I     &kp O    &kp P    &kp BSPC
&kp LCTRL     &kp A    &kp S    &kp D    &kp F    &kp G        &kp H    &kp J    &kp K     &kp L    &kp SEMI &kp SQT
&lht LSHFT LSHFT     &kp Z    &kp X    &kp C    &kp V    &kp B        &kp N    &kp M    &kp COMMA &kp DOT  &kp FSLH &lm_one_hyper
                        &kp LALT   &mo 2    &kp RET        &kp SPACE &lt 1 ESCAPE &kp LGUI
            >;
        };

        NAV {
            display-name = "NavNum";

            // -----------------------------------------------------------------------------------------
            // |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |
            // |  A  |  S  |  D  |  F  |  G  |   |  ←  |  ↓  |  ↑  |  →  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |
            //                             | LALT | MO2  | RET   | SPC   |       | LGUI |

            bindings = <
                &kp TAB    &kp N1    &kp N2   &kp N3   &kp N4   &kp N5       &kp N6   &kp N7   &kp N8   &kp N9   &kp N0   &kp BSPC
                &kp LCTRL  &trans    &trans   &trans   &trans   &trans       &kp LEFT &kp DOWN &kp UP   &kp RIGHT &trans   &trans
                &kp LSHFT  &kp LSHFT &sk LS(LALT)   &trans   &trans   &trans       &trans   &trans   &trans   &trans   &trans   &trans
                                            &kp LALT   &mo 2    &kp RET       &kp SPACE &trans   &kp LGUI
            >;
        };

        SYM {
            display-name = "Symbols";

            // -----------------------------------------------------------------------------------------
            // |  `  |  !  |  @  |  #  |  $  |   |  ^  |  &  |  (  |  )  |  `  |
            // |  V  |  -  |  +  |  =  |  #  |   |  _  |  :  |  [  |  ]  |  /  |
            // |  C  |  X  |     |  *  |  \  |   |  ~  |  "  |  {  |  }  |  @  |
            //                             | LALT | ESC   | RET   | SPC   | MO1 | LGUI |

            bindings = <
&kp LC(GRAVE)  &kp EXCL    &kp AT       &kp HASH &kp DLLR   &kp PRCNT     &kp CARET &kp AMPS  &kp LPAR &kp RPAR &kp GRAVE  &kp BSPC
&kp LG(V)      &trans      &kp MINUS    &kp PLUS &kp EQUAL  &kp HASH      &kp UNDER &kp COLON &kp LBKT &kp RBKT &kp FSLH   &kp DOT
&kp LG(C)      &kp LG(X)   &trans       &kp STAR &kp BSLH   &kp PIPE      &kp TILDE &kp DQT   &kp LBKT &kp RBKT &kp AT     &trans
                                        &kp LALT  &kp ESCAPE  &kp RET     &kp SPACE &mo 1     &kp LGUI
            >;
        };

        ADJ {
            display-name = "System";

            // -----------------------------------------------------------------------------------------
            // | TAB | F1  | F2  | F3  | F4  | F4  |   | F6  | F7  | F8  | F9  | F10 |
            // |     | BTCLR| BT0| BT1| BT2| BT3|   | BT4 |    | VOL-| MUTE| VOL+|
            // |     |      |    |    |    |    |   |     |    | PRE | PLAY| NXT |
            //                             |      |      |      |      |      |     |

            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4      &kp F5            &kp F6  &kp F7      &kp F8       &kp F9      &kp F10      &trans
&trans  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3      &bt BT_SEL 4   &trans  &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP  &trans
&trans  &trans       &trans        &trans        &trans        &trans            &trans         &trans  &kp C_PREV   &kp C_PP   &kp C_NEXT    &trans
                                    &trans        &trans        &trans          &trans  &trans      &trans
            >;
        };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
